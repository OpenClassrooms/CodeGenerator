{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.entityUtilClassName }};
use {{ skeletonModel.entityClassName }};
use {{ skeletonModel.entityNotFoundExceptionClassName }};
use {{ skeletonModel.entityGatewayClassName }};
use {{ skeletonModel.paginatedCollectionBuilderImplClassName }};

class {{ skeletonModel.shortName }} implements {{ skeletonModel.entityGatewayShortName }}
{
    /**
     * @var {{ skeletonModel.entityShortName }}[]
     */
    public static ${{ skeletonModel.pluralEntityShortName }} = [];

    public static int $id = 1;

    public function __construct(array ${{ skeletonModel.pluralEntityShortName }} = [])
    {
        self::${{ skeletonModel.pluralEntityShortName }} = ${{ skeletonModel.pluralEntityShortName }};
    }

    public function delete({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        unset(self::${{ skeletonModel.pluralEntityShortName }}[${{ skeletonModel.entityArgument }}->getId()]);
    }

    /**
     * {@inheritdoc}
     */
    public function findAll(array $filters = [], array $sorts = [], array $pagination = []): iterable
    {
        $paginatedCollectionBuilder = new {{ skeletonModel.paginatedCollectionBuilderImplShortName }}();

        return $paginatedCollectionBuilder->create()
            ->withItems(self::${{ skeletonModel.pluralEntityShortName }})
            ->withTotalItems(count(self::${{ skeletonModel.pluralEntityShortName }}))
            ->build();
    }

    public function findById(int ${{ skeletonModel.entityIdArgument}}): {{ skeletonModel.entityShortName }}
    {
        if (array_key_exists(${{ skeletonModel.entityIdArgument }}, self::${{ skeletonModel.pluralEntityShortName }})) {
            return self::${{ skeletonModel.pluralEntityShortName }}[${{ skeletonModel.entityIdArgument}}];
        }

        throw new {{ skeletonModel.entityNotFoundExceptionShortName }}();
    }

    public function insert({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        EntityUtil::setId(${{ skeletonModel.entityArgument }}, self::$id);
        self::${{ skeletonModel.pluralEntityShortName }}[] = ${{ skeletonModel.entityArgument }};
    }

    public function update({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        ${{ skeletonModel.entityArgument }}->update();
    }
}
