{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.paginationClassName }};
use {{ skeletonModel.getEntitiesUseCaseRequestClassName }};
use {{ skeletonModel.getEntitiesUseCaseRequestBuilderImplClassName }};
use {{ skeletonModel.getEntitiesUseCaseRequestDTOClassName }};
use {{ skeletonModel.getEntitiesUseCaseClassName }};
{% for entityStubClassName in skeletonModel.entityStubClassNames %}
use {{ entityStubClassName }};
{% endfor %}
use {{ skeletonModel.inMemoryEntityGatewayClassName }};
use {{ skeletonModel.useCaseListItemResponseAssemblerMockClassName }};
{% for useCaseListItemResponseStubClassName in skeletonModel.useCaseListItemResponseStubClassNames %}
use {{ useCaseListItemResponseStubClassName }};
{% endfor %}
use {{ skeletonModel.useCaseListItemResponseTestCaseClassName }};
use PHPUnit\Framework\TestCase;

class {{skeletonModel.shortName }} extends TestCase
{
    use {{ skeletonModel.useCaseListItemResponseTestCaseShortName }};

    /**
     * @var {{skeletonModel.getEntitiesUseCaseRequestDTOShortName }}
     */
    private $request;

    /**
     * @var {{skeletonModel.getEntitiesUseCaseShortName }}
     */
    private $useCase;

    /**
     * @test
     */
    final public function without{{ skeletonModel.entitiesShortName }}ReturnEmpty(): void
    {
        {{ skeletonModel.inMemoryEntityGatewayShortName }}::${{ skeletonModel.entitiesArgument }} = [];
        $response = $this->useCase->execute($this->request);
        $this->assertSame(0, $response->getTotalItems());
        $this->assertEmpty($response->getItems());
    }

    /**
     * @test
     */
    final public function get{{ skeletonModel.entitiesShortName }}ShouldReturnResponse(): void
    {
        {{ skeletonModel.inMemoryEntityGatewayShortName }}::${{ skeletonModel.entitiesArgument }} = [
{% for entityStubShortName in skeletonModel.entityStubShortNames %}
            {{ entityStubShortName }}::ID => new {{ entityStubShortName }}(),
{% endfor %}
        ];
        $response = $this->useCase->execute($this->request);
        $this->assertSame(2, $response->getTotalItems());
        $this->assertCount(2, $response->getItems());

        $this->assert{{ skeletonModel.useCaseListItemResponsesShortName }}(
            [
{% for useCaseListItemResponseStubShortName in skeletonModel.useCaseListItemResponseStubShortNames %}
                new {{ useCaseListItemResponseStubShortName }}(),
{% endfor %}
            ],
            $response->getItems()
        );

        $this->fail("TODO: configure stub");
    }

    protected function setup(): void
    {
        $this->useCase = new {{skeletonModel.getEntitiesUseCaseShortName }}(
            new {{ skeletonModel.inMemoryEntityGatewayShortName }}([{{ skeletonModel.entityStubShortNames | first }}::ID => new {{ skeletonModel.entityStubShortNames | first }}()]),
            new {{ skeletonModel.useCaseListItemResponseAssemblerMockShortName }}()
        );
        $this->request = $this->buildRequest();
    }

    private function buildRequest(): {{skeletonModel.getEntitiesUseCaseRequestShortName }}
    {
        $builder = new {{skeletonModel.getEntitiesUseCaseRequestBuilderImplShortName }}();

        return $builder
            ->create()
            ->withFilters([])
            ->withItemsPerPage(Pagination::ITEMS_PER_PAGE_DEFAULT)
            ->withPage()
            ->withSort([])
            ->build();
    }
}
