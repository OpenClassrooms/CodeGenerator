{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.getEntityUseCaseRequestClassName }};
use {{ skeletonModel.getEntityUseCaseRequestBuilderImplClassName }};
use {{ skeletonModel.getEntityUseCaseRequestDTOClassName }};
use {{ skeletonModel.getEntityUseCaseClassName }};
use {{ skeletonModel.entityStubClassName }};
use {{ skeletonModel.inMemoryEntityGatewayClassName }};
use {{ skeletonModel.useCaseDetailResponseAssemblerMockClassName }};
use {{ skeletonModel.useCaseDetailResponseStubClassName }};
use {{ skeletonModel.useCaseDetailResponseTestCaseClassName }};
use PHPUnit\Framework\TestCase;

class {{ skeletonModel.shortName }} extends TestCase
{
    use {{ skeletonModel.useCaseDetailResponseTestCaseShortName }};

    /**
     * @var {{ skeletonModel.getEntityUseCaseRequestDTOShortName }}
     */
    private $request;

    /**
     * @var {{ skeletonModel.getEntityUseCaseShortName }}
     */
    private $useCase;

    /**
     * @test
     *
     * @expectedException \{{ skeletonModel.entityNotFoundExceptionFileObjectClassName }}
     */
    final public function {{ skeletonModel.entityShortNameArgument }}NotFoundShouldThrowException(): void
    {
        $this->request->id = -1;
        $this->useCase->execute($this->request);
    }

    /**
     * @test
     */
    final public function get{{ skeletonModel.entityShortName }}ShouldReturnResponse(): void
    {
        $response = $this->useCase->execute($this->request);

        $this->assert{{ skeletonModel.entityShortName }}DetailResponse(new {{ skeletonModel.useCaseDetailResponseStubShortName }}(), $response);

        $this->fail("TODO: configure stub");
    }

    protected function setup(): void
    {
        $this->useCase = new {{ skeletonModel.getEntityUseCaseShortName }}(
            new {{ skeletonModel.useCaseDetailResponseAssemblerMockShortName }}(),
            new {{ skeletonModel.inMemoryEntityGatewayShortName }}([{{ skeletonModel.entityStubShortName }}::ID => new {{ skeletonModel.entityStubShortName }}()])
        );
        $this->request = $this->buildRequest();
    }

    private function buildRequest(): {{ skeletonModel.getEntityUseCaseRequestShortName }}
    {
        $builder = new {{ skeletonModel.getEntityUseCaseRequestBuilderImplShortName }}();

        return $builder
            ->create()
            ->with{{ skeletonModel.entityShortName }}Id({{ skeletonModel.entityStubShortName }}::ID)
            ->build();
    }
}
