{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.abstractControllerClassName }};
use {{ skeletonModel.entityViewModelClassName }};
use {{ skeletonModel.entityViewModelDetailAssemblerClassName }};
use {{ skeletonModel.entityNotFoundExceptionClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseClassName }};
use {{ skeletonModel.getEntityUseCaseClassName }};
use {{ skeletonModel.getEntityUseCaseRequestClassName }};
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;

class {{ skeletonModel.shortName }} extends {{ skeletonModel.abstractControllerShortName }}
{
    private {{ skeletonModel.entityViewModelDetailAssemblerShortName }} ${{ skeletonModel.entityViewModelDetailAssemblerArgument }};

    public function __construct(
        {{ skeletonModel.entityViewModelDetailAssemblerShortName }} $assembler
    ) {
        $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }} = $assembler;
    }

    /**
     * @Route({{ skeletonModel.routeAnnotation }})
     *
     * @Security("")
     * @throws NotFoundHttpException
     */
    public function getAction(int ${{ skeletonModel.entityArgument }}): JsonResponse
    {
        try {
            ${{ skeletonModel.entityArgument }} = $this->{{ skeletonModel.getEntityMethod }}(${{ skeletonModel.entityArgument }});
            $vm = $this->buildViewModel(${{ skeletonModel.entityArgument }});

            return $this->createJsonResponse($vm);
        } catch ({{ skeletonModel.entityNotFoundExceptionShortName }} $e) {
            $this->throwNotFoundException();
        }
    }

    /**
     * @throws {{ skeletonModel.entityNotFoundExceptionShortName }}
     */
    private function {{ skeletonModel.getEntityMethod }}(int ${{ skeletonModel.entityIdArgument }}): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
    {
        return $this->get({{ skeletonModel.getEntityUseCaseShortName }}::class)->execute(
            {{ skeletonModel.getEntityUseCaseRequestShortName }}::create(${{ skeletonModel.entityIdArgument }})
        );
    }

    protected function buildViewModel({{ skeletonModel.entityUseCaseDetailResponseShortName }} ${{ skeletonModel.entityArgument }}): {{ skeletonModel.entityViewModelShortName }}
    {
        return $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }}->create(${{ skeletonModel.entityArgument }});
    }
}
