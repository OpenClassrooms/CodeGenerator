{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.abstractControllerClassName }};
use {{ skeletonModel.collectionInformationClassName }};
use {{ skeletonModel.entityViewModelListItemClassName }};
use {{ skeletonModel.entityViewModelListItemAssemblerClassName }};
use {{ skeletonModel.getEntitiesUseCaseRequestBuilderClassName }};
use {{ skeletonModel.paginatedUseCaseResponseClassName }};
use {{ skeletonModel.getEntitiesUseCaseClassName }};
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

class {{ skeletonModel.shortName }} extends {{ skeletonModel.abstractControllerShortName }}
{
    private {{ skeletonModel.entityViewModelListItemAssemblerShortName }} ${{ skeletonModel.entityViewModelListItemAssemblerArgument }};

    private {{ skeletonModel.getEntitiesUseCaseRequestBuilderShortName }} ${{ skeletonModel.getEntitiesUseCaseRequestBuilderArgument }};

    public function __construct(
        {{ skeletonModel.entityViewModelListItemAssemblerShortName }} $assembler,
        {{ skeletonModel.getEntitiesUseCaseRequestBuilderShortName }} $builder
    ) {
        $this->{{ skeletonModel.entityViewModelListItemAssemblerArgument }} = $assembler;
        $this->{{ skeletonModel.getEntitiesUseCaseRequestBuilderArgument }} = $builder;
    }

    /**
     * @Route({{ skeletonModel.routeAnnotation }})
     *
     * @Security("")
     * @ParamConverter("collectionInformation")
     */
    public function __invoke({{ skeletonModel.collectionInformationShortName }} $collectionInformation): JsonResponse
    {
        ${{ skeletonModel.entitiesArgument }} = $this->{{ skeletonModel.getEntitiesMethod }}($collectionInformation);
        $vm = $this->buildViewModel(${{ skeletonModel.entitiesArgument }});

        return $this->createJsonResponse($vm);
    }

    private function {{ skeletonModel.getEntitiesMethod }}({{ skeletonModel.collectionInformationShortName }} $collectionInformation): {{ skeletonModel.paginatedUseCaseResponseShortName }}
    {
        return $this->get({{ skeletonModel.getEntitiesUseCaseShortName}}::class)->execute(
            $this->{{ skeletonModel.getEntitiesUseCaseRequestBuilderArgument }}
                ->create()
                ->withFilters($collectionInformation->getFilters())
                ->withItemsPerPage($collectionInformation->getItemsPerPage())
                ->withPage($collectionInformation->getPage())
                ->withSort($collectionInformation->getSorts())
                ->build()
        );
    }

    /**
     * @return {{ skeletonModel.entityViewModelListItemShortName }}[]
     */
    private function buildViewModel({{ skeletonModel.paginatedUseCaseResponseShortName}} ${{ skeletonModel.entitiesArgument }}): array
    {
        return $this->{{ skeletonModel.entityViewModelListItemAssemblerArgument }}->createListItems(
            ${{ skeletonModel.entitiesArgument }}->getItems()
        );
    }
}
