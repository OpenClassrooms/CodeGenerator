{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

{% if skeletonModel.useCarbon %}
use Carbon\CarbonImmutable;
{% endif %}
use {{ skeletonModel.abstractControllerClassName }};
use {{ skeletonModel.postEntityModelClassName }};
use {{ skeletonModel.entityViewModelDetailClassName }};
use {{ skeletonModel.entityViewModelDetailAssemblerClassName }};
use {{ skeletonModel.createEntityUseCaseRequestBuilderClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseClassName }};
use {{ skeletonModel.createEntityUseCaseClassName }};
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

class {{ skeletonModel.shortName }} extends {{ skeletonModel.abstractControllerShortName }}
{
    /**
     * @var {{ skeletonModel.createEntityUseCaseRequestBuilderShortName }}
     */
    private ${{ skeletonModel.createEntityUseCaseRequestBuilderArgument }};

    /**
     * @var {{ skeletonModel.entityViewModelDetailAssemblerShortName}}
     */
    private ${{ skeletonModel.entityViewModelDetailAssemblerArgument }};

    public function __construct(
        {{ skeletonModel.entityViewModelDetailAssemblerShortName }} $assembler,
        {{ skeletonModel.createEntityUseCaseRequestBuilderShortName }} $builder
    ) {
        $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }} = $assembler;
        $this->{{ skeletonModel.createEntityUseCaseRequestBuilderArgument }} = $builder;
    }

    /**
     * @Route({{ skeletonModel.routeAnnotation }})
     *
     * @Security("")
     */
    public function postAction(): JsonResponse
    {
        /** @var {{ skeletonModel.postEntityModelShortName }} $model */
        $model = $this->getModelFromRequest({{ skeletonModel.postEntityModelShortName }}::class);
        $response = $this->{{ skeletonModel.createEntityMethod }}($model);

        return $this->createCreatedResponse($this->generateLocationUrl($response), $this->buildViewModel($response));
    }

    private function {{ skeletonModel.createEntityMethod }}({{ skeletonModel.postEntityModelShortName }} $model): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
    {
        return $this->get({{ skeletonModel.createEntityUseCaseShortName }}::class)->execute(
            $this->{{ skeletonModel.createEntityUseCaseRequestBuilderArgument}}
                ->create()
{% for method in skeletonModel.postEntityModelMethods %}
{% if method.arguments[0].isDateType %}
                ->{{ method.name }}(new CarbonImmutable($model->{{ method.arguments[0].name }}))
{% else %}
                ->{{ method.name }}($model->{{ method.arguments[0].name }})
{% endif %}
{% endfor %}
                ->build()
        );
    }

    private function generateLocationUrl({{ skeletonModel.entityUseCaseDetailResponseShortName }} $response): string
    {
        return $this->generateUrl('{{ skeletonModel.routeName }}', ['{{ skeletonModel.entityIdArgument }}' => $response->getId()]);
    }

    private function buildViewModel({{ skeletonModel.entityUseCaseDetailResponseShortName }} $response): {{ skeletonModel.entityViewModelDetailShortName }}
    {
        return $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }}->create($response);
    }
}
