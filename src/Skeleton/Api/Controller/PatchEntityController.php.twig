{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.abstractControllerClassName }};
use {{ skeletonModel.patchEntityModelClassName }};
use {{ skeletonModel.entityViewModelDetailClassName }};
use {{ skeletonModel.entityViewModelDetailAssemblerClassName }};
use {{ skeletonModel.entityNotFoundExceptionClassName }};
use {{ skeletonModel.editEntityUseCaseRequestClassName }};
use {{ skeletonModel.editEntityUseCaseRequestBuilderClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseClassName }};
use {{ skeletonModel.editEntityUseCaseClassName }};
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\Routing\Annotation\Route;

class {{ skeletonModel.shortName }} extends {{ skeletonModel.abstractControllerShortName }}
{
    private {{ skeletonModel.editEntityUseCaseRequestBuilderShortName }} ${{ skeletonModel.editEntityUseCaseRequestBuilderArgument }};

    private {{ skeletonModel.entityViewModelDetailAssemblerShortName}} ${{ skeletonModel.entityViewModelDetailAssemblerArgument }};

    public function __construct(
        {{ skeletonModel.editEntityUseCaseRequestBuilderShortName }} $builder,
        {{ skeletonModel.entityViewModelDetailAssemblerShortName }} $assembler
    ) {
        $this->{{ skeletonModel.editEntityUseCaseRequestBuilderArgument }} = $builder;
        $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }} = $assembler;
    }

    /**
     * @Route({{ skeletonModel.routeAnnotation }})
     *
     * @Security("")
     * @throws NotFoundHttpException
     */
    public function patchAction(Request $request, int ${{ skeletonModel.entityIdArgument }}): JsonResponse
    {
        try {
            /** @var {{ skeletonModel.patchEntityModelShortName }} $model */
            $model = $this->getModelFromRequest({{ skeletonModel.patchEntityModelShortName }}::class);
            $response = $this->{{ skeletonModel.updateEntityMethod }}(${{ skeletonModel.entityIdArgument }}, $model);

            return $this->createUpdatedResponse($this->buildViewModel($response));
        } catch ({{ skeletonModel.entityNotFoundExceptionShortName }} $e) {
            $this->throwNotFoundException();
        }
    }

    /**
     * @throws {{ skeletonModel.entityNotFoundExceptionShortName }}
     */
    private function {{ skeletonModel.updateEntityMethod }}(int ${{ skeletonModel.entityIdArgument}}, {{ skeletonModel.patchEntityModelShortName }} $model): void
    {
        $this->get({{ skeletonModel.editEntityUseCaseShortName }}::class)->execute($this->buildRequest(${{ skeletonModel.entityIdArgument}}, $model));
    }

    private function buildRequest(int ${{ skeletonModel.entityIdArgument}}, {{ skeletonModel.patchEntityModelShortName }} $model): {{ skeletonModel.editEntityUseCaseRequestShortName }}
    {
        $requestBuilder = $this->{{ skeletonModel.editEntityUseCaseRequestBuilderArgument }}
            ->create()
            ->{{ skeletonModel.withEntityIdMethod }}(${{ skeletonModel.entityIdArgument}});

{% for field in skeletonModel.patchEntityModelFields %}
        !$model->{{ field.name }} ?: $requestBuilder->with{{ field.name|ucFirst}}($model->{{ field.name }});
{% endfor %}

        return $requestBuilder->build();
    }

    private function buildViewModel({{ skeletonModel.entityUseCaseDetailResponseShortName }} $response): {{ skeletonModel.entityViewModelDetailShortName }}
    {
        return $this->{{ skeletonModel.entityViewModelDetailAssemblerArgument }}->create($response);
    }
}

