{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.entityClassName }};
use {{ skeletonModel.entityFactoryClassName }};
use {{ skeletonModel.entityGatewayClassName }};
use {{ skeletonModel.createEntityUseCaseRequestClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseAssemblerClassName }};
use {{ skeletonModel.transactionClassName }};
use {{ skeletonModel.useCaseClassName }};
use {{ skeletonModel.useCaseRequestClassName }};

class {{ skeletonModel.shortName }} implements UseCase
{
    /**
     * @var {{ skeletonModel.entityFactoryShortName }}
     */
    private ${{ skeletonModel.entityFactoryArgument }};

    /**
     * @var {{ skeletonModel.entityGatewayShortName }}
     */
    private ${{ skeletonModel.entityGatewayArgument }};

    /**
     * @var {{ skeletonModel.entityUseCaseDetailResponseAssemblerShortName }}
     */
    private ${{ skeletonModel.entityUseCaseDetailResponseAssemblerArgument }};

    public function __construct(
        {{ skeletonModel.entityUseCaseDetailResponseAssemblerShortName }} ${{ skeletonModel.entityUseCaseDetailResponseAssemblerArgument }},
        {{ skeletonModel.entityFactoryShortName }} ${{ skeletonModel.entityFactoryArgument }},
        {{ skeletonModel.entityGatewayShortName }} ${{ skeletonModel.entityGatewayArgument }}
    ) {
        $this->{{ skeletonModel.entityFactoryArgument }} = ${{ skeletonModel.entityFactoryArgument }};
        $this->{{ skeletonModel.entityGatewayArgument }} = ${{ skeletonModel.entityGatewayArgument }};
$this->{{ skeletonModel.entityUseCaseDetailResponseAssemblerArgument }} = ${{ skeletonModel.entityUseCaseDetailResponseAssemblerArgument }};
}

/**
* @Transaction
*
* @param {{ skeletonModel.createEntityUseCaseRequestShortName }} $useCaseRequest
*/
public function execute(UseCaseRequest $useCaseRequest): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
{
${{ skeletonModel.entityArgument }} = $this->create($useCaseRequest);
$this->save(${{ skeletonModel.entityArgument }});

return $this->createResponse(${{ skeletonModel.entityArgument }});
}

private function create{{ skeletonModel.entityShortName }}({{ skeletonModel.createEntityUseCaseRequestShortName }} $request): {{ skeletonModel.entityShortName }}
{
${{ skeletonModel.entityArgument }} = $this->{{ skeletonModel.entityFactoryArgument }}->create();
$this->populate(${{ skeletonModel.entityArgument }}, $request);

        return ${{ skeletonModel.entityArgument }};
    }

    private function populate({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}, {{ skeletonModel.createEntityUseCaseRequestShortName }} $request): void
    {
{% for method in skeletonModel.createEntityUseCaseRequestMethods|sortAccessorsFieldNameByAlpha %}
        ${{ skeletonModel.entityArgument }}->set{{ method.fieldName|capitalize }}($request->{{ method.name }}());
{% endfor %}
    }

    private function save({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        $this->{{ skeletonModel.entityGatewayArgument }}->insert(${{ skeletonModel.entityArgument }});
    }

    private function createResponse({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
    {
        return $this->{{ skeletonModel.entityUseCaseDetailResponseAssemblerArgument }}->create(${{ skeletonModel.entityArgument }});
    }
}
