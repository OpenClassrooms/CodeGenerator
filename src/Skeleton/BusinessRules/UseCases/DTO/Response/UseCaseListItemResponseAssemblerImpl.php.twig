{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.entityClassName }};
use {{ skeletonModel.useCaseListItemResponseClassName }};
use {{ skeletonModel.useCaseListItemResponseAssemblerClassName }};
use {{ skeletonModel.paginatedUseCaseResponseClassName }};
use {{ skeletonModel.paginatedUseCaseResponseBuilderClassName }};
use {{ skeletonModel.paginatedCollectionClassName }};

class {{ skeletonModel.shortName }} implements {{ skeletonModel.useCaseListItemResponseAssemblerShortName }}
{
    use {{ skeletonModel.useCaseResponseAssemblerTraitShortName }};

    /**
     * @var {{ skeletonModel.paginatedUseCaseResponseBuilderShortName }}
     */
    private $paginatedUseCaseResponseBuilder;

    public function __construct({{ skeletonModel.paginatedUseCaseResponseBuilderShortName }} $builder)
    {
        $this->{{ skeletonModel.paginatedUseCaseResponseBuilderArgument }} = $builder;
    }

    /**
     * {@inheritdoc}
     */
    public function createPaginatedCollection({{ skeletonModel.paginatedCollectionShortName }} $collection): {{ skeletonModel.paginatedUseCaseResponseShortName }}
    {
        return $this->paginatedUseCaseResponseBuilder
            ->create()
            ->withItems($this->createFromCollection($collection->getItems()))
            ->withItemsPerPage($collection->getItemsPerPage())
            ->withPage($collection->getPage())
            ->withTotalItems($collection->getTotalItems())
            ->build();
    }

    /**
     * {@inheritdoc}
     */
    private function createFromCollection(array $collection = []): array
    {
        $items = [];

        foreach ($collection as $entity) {
            $items[] = $this->create($entity);
        }

        return $items;
    }

    /**
     * {@inheritdoc}
     */
    public function create({{ skeletonModel.entityShortName }} $entity): {{ skeletonModel.useCaseListItemResponseShortName }}
    {
        $response = new {{ skeletonModel.useCaseListItemResponseDTOShortName }}();
        $this->hydrateCommonFields($entity, $response);
{% for method in skeletonModel.entityMethods | sortNameByAlpha %}
            $response->{{ method.fieldName }} = $entity->{{ method.name }}();
{% endfor %}

        return $response;
    }
}
