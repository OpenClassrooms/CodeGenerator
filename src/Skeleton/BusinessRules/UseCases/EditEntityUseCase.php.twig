{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.entityClassName }};
use {{ skeletonModel.entityGatewayClassName }};
use {{ skeletonModel.editEntityUseCaseRequestClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseClassName }};
use {{ skeletonModel.entityUseCaseDetailResponseAssemblerClassName }};
use {{ skeletonModel.transactionClassName }};
use {{ skeletonModel.useCaseClassName }};
use {{ skeletonModel.useCaseRequestClassName }};

class {{ skeletonModel.shortName }} implements UseCase
{
    /**
     * @var {{ skeletonModel.entityGatewayShortName }}
     */
    private ${{ skeletonModel.entityGatewayArgument }};

    /**
     * @var {{ skeletonModel.entityUseCaseDetailResponseAssemblerShortName }}
     */
    private $responseAssembler;

    public function __construct(
        {{ skeletonModel.entityGatewayShortName }} ${{ skeletonModel.entityGatewayArgument }},
        {{ skeletonModel.entityUseCaseDetailResponseAssemblerShortName }} $responseAssembler
    ) {
        $this->{{ skeletonModel.entityGatewayArgument }} = ${{ skeletonModel.entityGatewayArgument }};
        $this->responseAssembler = $responseAssembler;
    }

    /**
     * @Transaction
     *
     * @param {{ skeletonModel.editEntityUseCaseRequestShortName }} $useCaseRequest
     *
     * @throws \{{ skeletonModel.entityNotFoundExceptionClassName }}
     */
    public function execute(UseCaseRequest $useCaseRequest): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
    {
        ${{ skeletonModel.entityArgument }} = $this->get{{ skeletonModel.entityShortName }}($useCaseRequest->get{{ skeletonModel.entityShortName }}Id());
        $this->populate(${{ skeletonModel.entityArgument }}, $useCaseRequest);
        $this->update(${{ skeletonModel.entityArgument }});

        return $this->createResponse(${{ skeletonModel.entityArgument }});
    }

    /**
     * @throws \{{ skeletonModel.entityNotFoundExceptionClassName }}
     */
    private function get{{ skeletonModel.entityShortName }}(int ${{ skeletonModel.entityIdArgument }}): {{ skeletonModel.entityShortName }}
    {
        return $this->{{ skeletonModel.entityGatewayArgument }}->find(${{ skeletonModel.entityIdArgument }});
    }

    private function populate({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}, {{ skeletonModel.editEntityUseCaseRequestShortName }} $request): void
    {
{% for method in skeletonModel.editEntityUseCaseRequestMethods|sortAccessorsFieldNameByAlpha %}
        !$request->is{{ method.fieldName|capitalize }}Updated() ?: ${{ skeletonModel.entityArgument }}->set{{ method.fieldName|capitalize }}($request->{{ method.name }}());
{% endfor %}
    }

    private function update({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        $this->{{ skeletonModel.entityGatewayArgument }}->update(${{ skeletonModel.entityArgument }});
    }

    private function createResponse({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): {{ skeletonModel.entityUseCaseDetailResponseShortName }}
    {
        return $this->responseAssembler->create(${{ skeletonModel.entityArgument }});
    }
}
