{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use {{ skeletonModel.entityGatewayClassname }};
use {{ skeletonModel.paginationClassName }};
use {{ skeletonModel.getEntitiesUseCaseRequestClassName }};
use {{ skeletonModel.entityUseCaseListItemResponseAssemblerClassName }};
use {{ skeletonModel.paginatedUseCaseResponseClassName }};
use {{ skeletonModel.paginatedCollectionClassName }};
use {{ skeletonModel.useCaseClassName }};
use {{ skeletonModel.useCaseRequestClassName }};

class {{ skeletonModel.shortName }} implements {{ skeletonModel.useCaseShortName }}
{
    /**
     * @var {{ skeletonModel.entityGatewayShortName }}
     */
    private $gateway;

    /**
     * @var {{ skeletonModel.entityUseCaseListItemResponseAssemblerShortName }}
     */
    private $responseAssembler;

    public function __construct({{ skeletonModel.entityGatewayShortName }} $gateway, {{ skeletonModel.entityUseCaseListItemResponseAssemblerShortName }} $assembler)
    {
        $this->gateway = $gateway;
        $this->responseAssembler = $assembler;
    }

    /**
     * @param {{ skeletonModel.getEntitiesUseCaseRequestShortName }} $useCaseRequest
     */
    public function execute({{ skeletonModel.useCaseRequestShortName }} $useCaseRequest): {{ skeletonModel.paginatedUseCaseResponseShortName }}
    {
        ${{ skeletonModel.entitiesArgument }} = $this->get{{ skeletonModel.entitiesShortName }}(
            $useCaseRequest->getFilters(),
            $useCaseRequest->getSorts(),
            $this->getPagination($useCaseRequest->getPage(), $useCaseRequest->getItemsPerPage())
        );

        return $this->buildResponse(${{ skeletonModel.entitiesArgument }});
    }

    private function get{{ skeletonModel.entitiesShortName }}(array $filters, array $sorts, array $pagination): {{ skeletonModel.paginatedCollectionShortName }}
    {
        return $this->gateway->findAll($filters, $sorts, $pagination);
    }

    private function getPagination(int $page, int $itemPerPage): array
    {
        return [
            Pagination::PAGE           => $page,
            Pagination::ITEMS_PER_PAGE => $itemPerPage,
        ];
    }

    private function buildResponse({{ skeletonModel.paginatedCollectionShortName }} ${{ skeletonModel.entitiesArgument }}): {{ skeletonModel.paginatedUseCaseResponseShortName }}
    {
        return $this->responseAssembler->createPaginatedCollection(${{ skeletonModel.entitiesArgument }});
    }
}
