{% include "Header.php.twig" %}

namespace {{ skeletonModel.namespace }};

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use {{ skeletonModel.paginatedCollectionFactoryClassName }};
use {{ skeletonModel.entityImplClassName }};
use {{ skeletonModel.entityClassName }};
use {{ skeletonModel.entityNotFoundExceptionClassName }};
use {{ skeletonModel.entityGatewayClassName }};
use Symfony\Bridge\Doctrine\RegistryInterface;

class {{ skeletonModel.shortName }} extends ServiceEntityRepository implements {{ skeletonModel.entityGatewayShortName }}
{
    private {{ skeletonModel.paginatedCollectionFactoryShortName }} ${{ skeletonModel.paginatedCollectionFactoryArgument }};

    public function __construct(RegistryInterface $registry, {{ skeletonModel.paginatedCollectionFactoryShortName }} ${{ skeletonModel.paginatedCollectionFactoryArgument }})
    {
        parent::__construct($registry, {{ skeletonModel.entityImplShortName }}::class);
        $this->{{ skeletonModel.paginatedCollectionFactoryArgument }} = ${{ skeletonModel.paginatedCollectionFactoryArgument }};
    }

    public function delete({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        $this->getEntityManager()->remove(${{ skeletonModel.entityArgument }});
    }

    public function findAll(array $filters = [], array $sorts = [], array $pagination = []): iterable
    {
        $queryBuilder = $this->getQueryBuilder();

        return $this->{{ skeletonModel.paginatedCollectionFactoryArgument }}->make($queryBuilder, $pagination);
    }

    private function getQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('{{ skeletonModel.entityFirstLetter }}');
    }

    public function findById(int ${{ skeletonModel.entityIdArgument }}): {{ skeletonModel.entityShortName }}
    {
        ${{ skeletonModel.entityArgument }} = parent::find(${{ skeletonModel.entityIdArgument }});
        if (null === ${{ skeletonModel.entityArgument }}) {
            throw new {{ skeletonModel.entityNotFoundExceptionShortName }}();
        }

        return ${{ skeletonModel.entityArgument }};
    }

    public function insert({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        $this->getEntityManager()->persist(${{ skeletonModel.entityArgument }});
    }

    public function update({{ skeletonModel.entityShortName }} ${{ skeletonModel.entityArgument }}): void
    {
        ${{ skeletonModel.entityArgument }}->update();
    }
}
