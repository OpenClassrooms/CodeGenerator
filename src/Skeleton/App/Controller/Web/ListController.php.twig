<?php
{% include "Header.php.twig" %}

namespace {{ controllerNamespace }};

use OC\BusinessRules\Gateways\Pagination;
use OC\BusinessRules\Responders\PaginatedUseCaseResponse;
use {{ listViewModelClassName }};
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * @author {{ author }} <{{ authorEmail }}>
 */
class {{ controllerShortClassName }} extends Controller
{
    public function list{{ entitiesNameUC }}Action(Request $request): Response
    {
        ${{ entitiesNameLC }} = $this->get{{ entitiesNameUC }}($request);
        $vm = $this->buildVm(${{ entitiesNameLC }});

        return $this->render('{{ templateName }}', ['vm' => $vm]);
    }

    private function get{{ entitiesNameUC }}(Request $request): PaginatedUseCaseResponse
    {
        return $this->get('{{ useCaseServiceName }}')
            ->execute(
                $this->get('{{ useCaseRequestBuilderServiceName }}')
                    ->create()
                    ->withItemsPerPage(Pagination::ITEMS_PER_PAGE_ADMIN)
                    ->withPage($request->get('page', 1))
                    ->build()
            );
    }

    private function buildVm(PaginatedUseCaseResponse $response): {{ listViewModelShortClassName }}
    {
        return
            $this->get('{{ listViewModelBuilderServiceName }}')
                ->create()
                ->with{{ entitiesNameUC }}($this->get('{{ viewModelListItemAssemblerServiceName }}')->createListItems($response->getItems()))
                ->withPagination($this->get('oc.view_models.pagination.pagination_factory')->createFromPaginatedUseCaseResponse($response, '{{ routeName }}'))
                ->build();
    }
}
