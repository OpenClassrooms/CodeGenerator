<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Api\ViewModels\Domain\SubDomain;

use OC\Assert;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailAssembler;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailStub1;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailTestCase;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\BusinessRules\Responders\Domain\SubDomain\FunctionalEntityDetailResponseStub1;
use PHPUnit\Framework\TestCase;

final class FunctionalEntityViewModelDetailAssemblerTest extends TestCase
{
    use FunctionalEntityViewModelDetailTestCase;

    private FunctionalEntityViewModelDetailAssembler $assembler;

    /** @test */
    public function onCreateShouldReturnViewModel(): void
    {
        $actual = $this->assembler->create(new FunctionalEntityDetailResponseStub1());
        $expected = new FunctionalEntityViewModelDetailStub1();
        Assert::assertObjectsEqual($expected, $actual);
    }

    protected function setUp(): void
    {
        $this->assembler = new FunctionalEntityViewModelDetailAssembler();
    }
}
