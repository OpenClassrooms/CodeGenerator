<?php declare(strict_types=1);
// Auto Generated by OpenClassrooms Code Generator

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Api\ViewModels\Domain\SubDomain\Impl;

use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailAssembler;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\ViewModels\Domain\SubDomain\Impl\FunctionalEntityViewModelDetailAssemblerImpl;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailStub1;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelDetailTestCase;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\BusinessRules\Responders\Domain\SubDomain\FunctionalEntityDetailResponseStub1;
use PHPUnit\Framework\TestCase;

class FunctionalEntityViewModelDetailAssemblerImplTest extends TestCase
{
    use FunctionalEntityViewModelDetailTestCase;

    /**
     * @var FunctionalEntityViewModelDetailAssembler
     */
    private $assembler;

    /**
     * @test
     */
    final public function onCreateShouldReturnViewModel(): void
    {
        $actual = $this->assembler->create(new FunctionalEntityDetailResponseStub1());
        $expected = new FunctionalEntityViewModelDetailStub1();
        $this->assertFunctionalEntityViewModelDetail($expected, $actual);
    }

    protected function setUp(): void
    {
        $this->assembler = new FunctionalEntityViewModelDetailAssemblerImpl();
    }
}
