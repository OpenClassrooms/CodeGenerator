<?php declare(strict_types=1);
// Auto Generated by OpenClassrooms Code Generator

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\BusinessRules\UseCases\Domain\SubDomain;

use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Requestors\Domain\SubDomain\GenericUseCaseRequest;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\DTO\Request\GenericUseCaseRequestBuilderImpl;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\DTO\Request\GenericUseCaseRequestDTO;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\GenericUseCase;
use PHPUnit\Framework\TestCase;

/**
 * @author authorStub <author.stub@example.com>
 */
class GenericUseCaseTest extends TestCase
{
    /**
     * @var GenericUseCaseRequestDTO
     */
    private $request;

    /**
     * @var GenericUseCase
     */
    private $useCase;

    /**
     * @test
     */
    public function genericUseCaseReturnResponse()
    {
        $this->fail("TODO: Implement this test");
    }

    /**
     * @inheritdoc
     */
    protected function setUp()
    {
        $this->request = $this->buildRequest();
        $this->useCase = new GenericUseCase();
    }

    private function buildRequest(): GenericUseCaseRequest
    {
        return (new GenericUseCaseRequestBuilderImpl())
            ->create()
            ->build();
    }
}
