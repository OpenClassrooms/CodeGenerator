<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\BusinessRules\UseCases\Domain\SubDomain;

use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Requestors\Domain\SubDomain\DeleteFunctionalEntityRequest;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\DeleteFunctionalEntity;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\DTO\Request\DeleteFunctionalEntityRequestBuilderImpl;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\DTO\Request\DeleteFunctionalEntityRequestDTO;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\BusinessRules\Entities\Domain\SubDomain\FunctionalEntityStub1;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\BusinessRules\Gateways\Domain\SubDomain\InMemoryFunctionalEntityGateway;
use PHPUnit\Framework\TestCase;

final class DeleteFunctionalEntityTest extends TestCase
{
    private DeleteFunctionalEntityRequestDTO $request;

    private DeleteFunctionalEntity $useCase;

    /**
     * @test
     * @expectedException \OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Gateways\Domain\SubDomain\Exceptions\FunctionalEntityNotFoundException
     */
    public function functionalEntityNotFoundThrowException(): void
    {
        $this->request->functionalEntityId = -1;
        $this->useCase->execute($this->request);
    }

    /** @test */
    public function deleteFunctionalEntity(): void
    {
        $this->assertNotEmpty(InMemoryFunctionalEntityGateway::$functionalEntities);
        $this->useCase->execute($this->request);

        $this->assertEmpty(InMemoryFunctionalEntityGateway::$functionalEntities);
    }

    protected function setUp(): void
    {
        $functionalEntityStub = [FunctionalEntityStub1::ID => new FunctionalEntityStub1()];
        $this->request = $this->buildRequest();
        $this->useCase = new DeleteFunctionalEntity(new InMemoryFunctionalEntityGateway($functionalEntityStub));
    }

    private function buildRequest(): DeleteFunctionalEntityRequest
    {
        return (new DeleteFunctionalEntityRequestBuilderImpl())
            ->create()
            ->withFunctionalEntityId(FunctionalEntityStub1::ID)
            ->build();
    }
}
