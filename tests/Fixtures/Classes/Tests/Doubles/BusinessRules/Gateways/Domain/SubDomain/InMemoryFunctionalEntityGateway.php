<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Tests\Doubles\BusinessRules\Gateways\Domain\SubDomain;

use OpenClassrooms\CodeGenerator\Tests\EntityUtil;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Entities\Domain\SubDomain\FunctionalEntity;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Gateways\Domain\SubDomain\Exceptions\FunctionalEntityNotFoundException;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Gateways\Domain\SubDomain\FunctionalEntityGateway;
use OpenClassrooms\UseCase\Application\Entity\PaginatedCollectionBuilderImpl;

class InMemoryFunctionalEntityGateway implements FunctionalEntityGateway
{
    /**
     * @var FunctionalEntity[]
     */
    public static array $functionalEntities = [];

    public static int $id = 1;

    public function __construct(array $functionalEntities = [])
    {
        self::$functionalEntities = $functionalEntities;
    }

    public function delete(FunctionalEntity $functionalEntity): void
    {
        unset(self::$functionalEntities[$functionalEntity->getId()]);
    }

    /**
     * {@inheritdoc}
     */
    public function findAll(array $filters = [], array $sorts = [], array $pagination = []): iterable
    {
        $paginatedCollectionBuilder = new PaginatedCollectionBuilderImpl();

        return $paginatedCollectionBuilder->create()
            ->withItems(self::$functionalEntities)
            ->withTotalItems(count(self::$functionalEntities))
            ->build();
    }

    public function findById(int $functionalEntityId): FunctionalEntity
    {
        if (array_key_exists($functionalEntityId, self::$functionalEntities)) {
            return self::$functionalEntities[$functionalEntityId];
        }

        throw new FunctionalEntityNotFoundException();
    }

    public function insert(FunctionalEntity $functionalEntity): void
    {
        EntityUtil::setId($functionalEntity, self::$id);
        self::$functionalEntities[] = $functionalEntity;
    }

    public function update(FunctionalEntity $functionalEntity): void
    {
        $functionalEntity->update();
    }
}
