<?php declare(strict_types=1);
// Auto Generated by OpenClassrooms Code Generator

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain;

use OpenClassrooms\UseCase\BusinessRules\Requestors\UseCase;
use OpenClassrooms\UseCase\BusinessRules\Requestors\UseCaseRequest;

/**
 * @author authorStub <author.stub@example.com>
 */
class GetGenericUseCases implements UseCase
{
    /**
     * @var GenericUseCaseGateway
     */
    private $genericUseCaseGateway;

    /**
     * @var GenericUseCaseResponseAssembler
     */
    private $genericUseCaseResponseAssembler;

    /**
     * @param GetGenericUseCasesRequest $useCaseRequest
     *
     * @return \OpenClassrooms\UseCase\BusinessRules\Responders\PaginatedUseCaseResponse
     */
    public function execute(UseCaseRequest $useCaseRequest)
    {
        $genericUseCases = $this->getGenericUseCases($useCaseRequest);

        return $this->getGenericUseCasesResponse($genericUseCases);
    }

    private function getGenericUseCases(GetGenericUseCasesRequest $useCaseRequest): PaginatedCollection
    {
        return $this->genericUseCaseGateway->findAll(
            $useCaseRequest->getFilters(),
            $useCaseRequest->getSorts(),
            $this->getPagination($useCaseRequest->getPage(), $useCaseRequest->getItemsPerPage())
        );
    }

    private function getPagination($page, $itemPerPage): array
    {
        return [
            Pagination::PAGE           => $page,
            Pagination::ITEMS_PER_PAGE => $itemPerPage,
        ];
    }

    private function getGenericUseCasesResponse(PaginatedCollection $genericUseCases): PaginatedUseCaseResponse
    {
        return $this->genericUseCaseResponseAssembler->createFromPaginatedCollection(
            $genericUseCases
        );
    }

    public function setGenericUseCaseGateway(GenericUseCaseGateway $gateway)
    {
        $this->genericUseCaseGateway = $gateway;
    }

    public function setGenericUseCaseResponseAssembler(GenericUseCaseResponseAssembler $assembler)
    {
        $this->genericUseCaseResponseAssembler = $assembler;
    }
}
