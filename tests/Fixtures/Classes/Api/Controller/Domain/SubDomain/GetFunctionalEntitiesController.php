<?php

// Auto Generated by OpenClassrooms Code Generator

declare(strict_types=1);

namespace OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\Controller\Domain\SubDomain;

use OC\ApiBundle\Framework\FrameworkBundle\Controller\AbstractApiController;
use OC\ApiBundle\ParamConverter\CollectionInformation;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelListItem;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\Api\ViewModels\Domain\SubDomain\FunctionalEntityViewModelListItemAssembler;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Requestors\Domain\SubDomain\GetFunctionalEntitiesRequestBuilder;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\Responders\PaginatedUseCaseResponse;
use OpenClassrooms\CodeGenerator\Tests\Fixtures\Classes\BusinessRules\UseCases\Domain\SubDomain\GetFunctionalEntities;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;

class GetFunctionalEntitiesController extends AbstractApiController
{
    /**
     * @var FunctionalEntityViewModelListItemAssembler
     */
    private $functionalEntityViewModelListItemAssembler;

    /**
     * @var GetFunctionalEntitiesRequestBuilder
     */
    private $getFunctionalEntitiesRequestBuilder;

    public function __construct(
        FunctionalEntityViewModelListItemAssembler $assembler,
        GetFunctionalEntitiesRequestBuilder $builder
    ) {
        $this->functionalEntityViewModelListItemAssembler = $assembler;
        $this->getFunctionalEntitiesRequestBuilder = $builder;
    }

    /**
     * @Route("/functional-entities", name="oc_api_sub_domain_functional_entity_get_all", methods={"GET"})
     *
     * @Security("")
     * @ParamConverter("collectionInformation")
     */
    public function getAction(CollectionInformation $collectionInformation): JsonResponse
    {
        $functionalEntities = $this->getFunctionalEntities($collectionInformation);
        $vm = $this->buildViewModel($functionalEntities);

        return $this->createJsonResponse($vm);
    }

    private function getFunctionalEntities(CollectionInformation $collectionInformation): PaginatedUseCaseResponse
    {
        return $this->get(GetFunctionalEntities::class)->execute(
            $this->getFunctionalEntitiesRequestBuilder
                ->create()
                ->withFilters($collectionInformation->getFilters())
                ->withItemsPerPage($collectionInformation->getItemsPerPage())
                ->withPage($collectionInformation->getPage())
                ->withSort($collectionInformation->getSorts())
                ->build()
        );
    }

    /**
     * @return FunctionalEntityViewModelListItem[]
     */
    private function buildViewModel(PaginatedUseCaseResponse $functionalEntities): array
    {
        return $this->functionalEntityViewModelListItemAssembler->createListItems(
            $functionalEntities->getItems()
        );
    }
}
